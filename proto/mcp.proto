// /pandacea/mcp.proto
// Defines the Pandacea Model Context Protocol (MCP) messages.
// Version: 1.0.0

syntax = "proto3";

package pandacea.mcp;

// Import standard Google well-known types.
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto"; // For extensions

// --- Core Message Definitions ---

// Represents a request initiated by a Requestor (e.g., app, agent).
message McpRequest {
  // Unique identifier for this specific request message (e.g., UUID v4 string).
  // REQUIRED. Must not be empty.
  string request_id = 1;

  // Timestamp indicating when the request was created by the requestor.
  // REQUIRED. Must be a valid timestamp.
  google.protobuf.Timestamp timestamp = 2;

  // Information about the entity making the request.
  // REQUIRED.
  RequestorIdentity requestor_identity = 3;

  // Detailed description of the purpose for which data/action is requested.
  // REQUIRED.
  PurposeDNA purpose_dna = 4;

  // List of specific permissions (data access or actions) sought by this request.
  // REQUIRED. Must contain at least one permission.
  repeated PermissionSpecification permissions = 5;

  // Optional: Timestamp after which this specific request message is considered invalid
  // by the responder. If set, must be after the `timestamp`.
  google.protobuf.Timestamp request_expiry = 6;

  // Cryptographic signature covering the request fields (typically 1-6, 8, 9, 11).
  // The exact fields covered and canonicalization method should be specified
  // by the implementation or a companion spec.
  // REQUIRED for security validation.
  CryptoSignature signature = 7;

  // Version string of the MCP schema this request adheres to (e.g., "1.0.0").
  // REQUIRED. Must follow semantic versioning principles.
  string mcp_version = 8;

  // Optional: Identifier of a previous request this one relates to
  // (e.g., for updating a previous grant, renewing consent).
  string related_request_id = 9;

  // Optional: Field for future protocol extensions or custom data.
  // Implementations should ignore extensions they don't understand.
  repeated google.protobuf.Any extensions = 10;

  // Optional: Additional contextual data relevant to the request,
  // provided by the requestor. Can be used by the Consent Manager for evaluation.
  // Example: {"app_version": "1.2.3", "foreground": true}
  google.protobuf.Struct context_data = 11;
}

// Represents a response generated by a Responder (e.g., Consent Manager).
message McpResponse {
  // Unique identifier for this specific response message (e.g., UUID v4 string).
  // REQUIRED. Must not be empty.
  string response_id = 1;

  // The unique ID of the `McpRequest` this response corresponds to.
  // REQUIRED. Must match the `request_id` of the initiating request.
  string request_id = 2;

  // Timestamp indicating when the response was generated by the responder.
  // REQUIRED. Must be a valid timestamp.
  google.protobuf.Timestamp timestamp = 3;

  // Overall status of the request processing.
  // REQUIRED. Must not be STATUS_UNSPECIFIED.
  Status status = 4;

  // Optional: Human-readable message providing context for the status,
  // especially useful for DENIED, ERROR, or PARTIALLY_APPROVED statuses.
  string status_message = 5;

  // Optional: Provides granular status for each permission requested.
  // REQUIRED if `status` is PARTIALLY_APPROVED.
  // MUST contain entries corresponding to all permissions in the original request
  // if the status is PARTIALLY_APPROVED.
  repeated PermissionStatus permission_statuses = 6;

  // Optional: Payload containing data returned as a result of an approved READ request.
  // The format depends on the requested resource. Could be raw bytes,
  // or potentially a google.protobuf.Any for structured data.
  bytes response_payload = 7;

  // Optional: A cryptographic receipt or proof of the consent decision.
  // The format and content are implementation-specific but should allow
  // verification of the consent grant/denial. Could be a signed hash
  // of key decision elements (request hash, purpose hash, rules evaluated, timestamp).
  bytes consent_receipt = 8;

  // Cryptographic signature covering the response fields (typically 1-8, 10).
  // The exact fields covered and canonicalization method should be specified
  // by the implementation or a companion spec.
  // REQUIRED for verifying the responder's authenticity and integrity.
  CryptoSignature signature = 9;

  // Version string of the MCP schema this response adheres to (e.g., "1.0.0").
  // REQUIRED. Must follow semantic versioning principles.
  string mcp_version = 10;

  // Optional: Field for future protocol extensions or custom data.
  repeated google.protobuf.Any extensions = 11;

  // Nested enum for the overall status.
  enum Status {
    STATUS_UNSPECIFIED = 0; // Default, should not be used in a valid response.
    APPROVED = 1;           // The request (all permissions) was approved.
    PARTIALLY_APPROVED = 2; // Some permissions approved, some denied (see permission_statuses).
    DENIED = 3;             // The request (all permissions) was denied.
    ERROR = 4;              // An error occurred processing the request (details in status_message).
    PENDING = 5;            // The request requires further action (e.g., user interaction).
  }

  // Nested message for per-permission status.
  message PermissionStatus {
    // Matches PermissionSpecification.resource_identifier from the request.
    // REQUIRED.
    string resource_identifier = 1;

    // Matches PermissionSpecification.requested_action from the request.
    // REQUIRED. Must not be ACTION_UNSPECIFIED.
    PermissionSpecification.Action requested_action = 2;

    // Indicates if this specific permission was granted.
    // REQUIRED.
    bool granted = 3;

    // Optional: Reason if the permission was denied (`granted` is false).
    string reason = 4;
  }
}


// --- Supporting Structures ---

// Defines cryptographic signature information.
message CryptoSignature {
  // Identifier for the public key used for verification (e.g., key fingerprint, URI, alias).
  // REQUIRED. Must not be empty.
  string key_id = 1;

  // Algorithm used for signing (e.g., "Ed25519", "ECDSA-P256").
  // REQUIRED. Must be a recognized algorithm identifier.
  string algorithm = 2;

  // The actual signature bytes.
  // REQUIRED. Must not be empty.
  bytes signature = 3;
}

// Represents the identity of the entity making a request.
message RequestorIdentity {
  // A stable pseudonymous identifier for the requestor (e.g., DID, unique username).
  // REQUIRED. Must not be empty.
  string pseudonym_id = 1;

  // The public key associated with the pseudonym_id, used for signature verification.
  // The format depends on the algorithm specified in the signature.
  // REQUIRED. Must not be empty.
  bytes public_key = 2;

  // Optional: List of URLs pointing to verifiable claims or attestations about the requestor
  // (e.g., certifications, membership proofs). Verification mechanism is out of scope for MCP core.
  repeated string attestations = 3;

  // Optional: Trust tier assigned to the requestor by the *responder's* system.
  // This is informational for the responder and may influence policy decisions.
  // It's not typically set *by* the requestor themselves.
  uint32 trust_tier = 4;
}

// Describes the purpose for which data or action is requested.
// Aligned with concepts like GDPR's "purpose limitation".
message PurposeDNA {
  // A unique identifier for this specific purpose instance or definition.
  // Could be a URI pointing to a registry or a locally unique ID.
  // REQUIRED. Must not be empty.
  string purpose_id = 1;

  // High-level category of the purpose. Use standardized values where possible.
  // REQUIRED. Must not be PURPOSE_CATEGORY_UNSPECIFIED.
  PurposeCategory primary_purpose_category = 2;

  // Optional: Additional purpose categories if the request serves multiple goals.
  repeated PurposeCategory secondary_purpose_categories = 12;

  // Detailed, human-readable description of the specific purpose.
  // Should be clear and unambiguous for user comprehension.
  // REQUIRED. Must not be empty.
  string specific_purpose_description = 3;

  // List of data types or resource categories involved (e.g., "user.email", "device.location.coarse").
  // REQUIRED. Must contain entries corresponding to requested permission resources.
  repeated string data_types_involved = 4;

  // Description of how the data will be processed or the action performed.
  // REQUIRED. Must not be empty.
  string processing_description = 5;

  // Description of data storage location, duration, and security measures.
  // REQUIRED. Must not be empty.
  string storage_description = 6;

  // Optional: Identifiers or categories of any third parties who might receive the data.
  repeated string intended_recipients = 7;

  // Optional: Timestamp after which consent granted for this specific purpose definition expires.
  // This relates to the validity of the purpose itself, distinct from `request_expiry`.
  google.protobuf.Timestamp purpose_expiry_timestamp = 8;

  // Optional: Link to a more detailed privacy policy or legal justification.
  string legal_context_url = 9;

  // Optional: Legal basis claimed for processing (e.g., "Consent", "LegitimateInterest", "Contract").
  string legal_basis = 13;

  // Optional: Jurisdiction(s) whose laws are considered applicable.
  string jurisdiction = 14;

  // Optional: Details about third-party sharing, if any.
  ThirdPartySharing third_party_sharing = 15;

  // Optional: Metadata specific to AI agents involved in the request/processing.
  // Example: {"agent_model": "model-v3", "task_type": "summarization"}
  google.protobuf.Struct agent_metadata = 10;

  // Optional: Additional constraints related to the purpose itself.
  // Example: {"data_minimization_level": "high"}
  google.protobuf.Struct constraints = 11;

  // Enum for high-level purpose categories. Extend as needed.
  enum PurposeCategory {
    PURPOSE_CATEGORY_UNSPECIFIED = 0; // Default, invalid if used as primary.
    ANALYTICS = 1;                    // Understanding usage patterns, product improvement.
    PERSONALIZATION = 2;              // Tailoring content or experience to the user.
    RESEARCH_DEVELOPMENT = 3;         // R&D, model training, scientific study.
    SECURITY = 4;                     // Fraud detection, authentication, system integrity.
    OPERATIONS = 5;                   // Core service functionality, debugging, maintenance.
    MARKETING_ADVERTISING = 6;        // Promoting products or services.
    LEGAL_COMPLIANCE = 7;             // Fulfilling legal or regulatory obligations.
    COMMUNICATIONS = 8;               // Sending messages to the user (notifications, etc.).
    // Add other common categories as needed...
  }

  // Details about third-party sharing.
  message ThirdPartySharing {
    // Is data shared with third parties?
    bool is_shared = 1;
    // List of third-party identifiers or categories. Required if is_shared is true.
    repeated string recipients = 2;
    // Purpose for which data is shared with third parties. Required if is_shared is true.
    string sharing_purpose_description = 3;
  }
}

// Specifies a single permission being requested (a data access or an action).
message PermissionSpecification {
  // Identifier for the specific resource being targeted (e.g., data field path "user.profile.email",
  // API endpoint "/api/v1/status", sensor name "env_sensor_temp").
  // REQUIRED. Must not be empty.
  string resource_identifier = 1;

  // The type of action requested on the resource.
  // REQUIRED. Must not be ACTION_UNSPECIFIED.
  Action requested_action = 2;

  // Optional: Fine-grained constraints on the permission.
  // Uses Struct for flexibility. Examples:
  // {"max_frequency_per_hour": 10}
  // {"location_precision": "city"}
  // {"data_access_scope": "aggregated"} // e.g., "personal", "aggregated", "anonymized"
  // {"valid_start_time": "2024-01-01T00:00:00Z", "valid_end_time": "2024-12-31T23:59:59Z"}
  google.protobuf.Struct constraints = 3;

  // Optional: Chain of delegation identifiers if this permission was delegated.
  // Format TBD, could be requestor IDs or specific delegation tokens.
  repeated string delegation_chain = 4;

  // Enum for the type of action requested.
  enum Action {
    ACTION_UNSPECIFIED = 0; // Default, invalid if used.
    READ = 1;               // Requesting to read/retrieve data.
    WRITE = 2;              // Requesting to write/modify/create data.
    DELETE = 5;             // Requesting to delete data. (Added based on common CRUD)
    EXECUTE = 3;            // Requesting to perform an action/function/call an API.
    OBSERVE = 4;            // Requesting to subscribe to data streams/events.
  }
} 