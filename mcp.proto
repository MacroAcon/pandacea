syntax = "proto3";

package pandacea.mcp;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto"; // For flexible constraints
import "google/protobuf/any.proto"; // For extensions

// Defines cryptographic signature information.
message CryptoSignature {
  // Identifier for the public key used (e.g., key fingerprint or URI).
  string key_id = 1;
  // Algorithm used for signing (e.g., "Ed25519", "ECDSA-P256").
  string algorithm = 2;
  // The actual signature bytes.
  bytes signature = 3;
}

// Represents the identity of the entity making a request.
message RequestorIdentity {
  // A stable pseudonymous identifier for the requestor.
  string pseudonym_id = 1;
  // The public key associated with the pseudonym_id, used for signature verification.
  bytes public_key = 2;
  // Optional: URL or list of URLs pointing to verifiable claims or attestations about the requestor.
  repeated string attestations = 3;
}

// Describes the purpose for which data or action is requested.
// Aligned with concepts like GDPR's "purpose limitation".
message PurposeDNA {
  // Standardized categories for high-level purpose classification.
  enum PurposeCategory {
    PURPOSE_CATEGORY_UNSPECIFIED = 0;
    ANALYTICS = 1;              // Data analysis, reporting, BI.
    PERSONALIZATION = 2;        // Tailoring content or experience.
    MARKETING = 3;              // Advertising, promotions.
    SECURITY = 4;               // Fraud detection, threat mitigation.
    OPERATIONS = 5;             // System maintenance, debugging, core functionality.
    RESEARCH_DEVELOPMENT = 6; // R&D, product improvement.
    LEGAL_COMPLIANCE = 7;       // Meeting legal or regulatory obligations.
    THIRD_PARTY_SHARING = 8;    // Explicit sharing with specified third parties.
    FUNCTIONALITY = 9;          // Essential for providing the requested service/feature.
  }

  // A unique identifier for this specific purpose instance, potentially linkable to a registry.
  string purpose_id = 1;
  // High-level category of the purpose.
  PurposeCategory primary_purpose_category = 2; // Changed from string
  // Detailed, human-readable description of the specific purpose. Should be clear and unambiguous.
  string specific_purpose_description = 3;
  // List of data types or categories involved (e.g., "user.email", "device.location.coarse", "sensor.temperature"). Standardized vocabulary is encouraged.
  repeated string data_types_involved = 4;
  // Description of how the data will be processed or the action performed.
  string processing_description = 5;
  // Description of data storage location, duration, and security measures.
  string storage_description = 6;
  // Identifiers or categories of any third parties who might receive the data.
  repeated string intended_recipients = 7;
  // Timestamp after which consent granted for this specific purpose expires.
  google.protobuf.Timestamp purpose_expiry_timestamp = 8;
  // Link to a more detailed privacy policy or legal justification, if applicable.
  string legal_context_url = 9;

  // --- Data Lineage Tracking ---
  // Optional: ID of the request that originated the data being processed under this purpose.
  string origin_request_id = 10;
  // Optional: Description of transformations applied to the data since its origin.
  string transformation_description = 11;

  // --- Agent Metadata ---
  // Optional: Flexible key-value store for agent-specific metadata related to this purpose.
  google.protobuf.Struct agent_metadata = 12;
}

// Specifies a single permission being requested (a data access or an action).
message PermissionSpecification {
  // Identifier for the specific resource being targeted (e.g., a data field, API endpoint, sensor).
  string resource_identifier = 1;
  // The type of action requested on the resource.
  enum Action {
    ACTION_UNSPECIFIED = 0; // Default, should not be used.
    READ = 1;               // Requesting to read data.
    WRITE = 2;              // Requesting to write or modify data.
    EXECUTE = 3;            // Requesting to perform an action/function.
    OBSERVE = 4;            // Requesting to subscribe to data streams/events.
  }
  Action requested_action = 2;
  // Optional: Fine-grained constraints on the permission (e.g., frequency limits, data precision, geographical boundaries).
  // Uses Struct for flexibility. Example: {"max_frequency_per_hour": 10, "location_precision": "city"}
  google.protobuf.Struct constraints = 3;
}

// The main request message following the Model Context Protocol.
message MCPRequest {
  // Unique identifier for this specific request message (e.g., UUID).
  string request_id = 1;
  // Timestamp when the request was created.
  google.protobuf.Timestamp timestamp = 2;
  // Identity of the entity making the request.
  RequestorIdentity requestor_identity = 3;
  // Detailed description of the purpose behind the request.
  PurposeDNA purpose_dna = 4;
  // List of specific permissions being sought in this request.
  repeated PermissionSpecification permissions = 5;
  // Optional: Timestamp after which this specific request message is no longer valid.
  google.protobuf.Timestamp request_expiry = 6;
  // Cryptographic signature covering the core fields of the request (e.g., fields 1-6, 8-10)
  // calculated by the requestor using their private key.
  CryptoSignature signature = 7; // Note: Signature calculation must exclude the signature field itself and potentially extensions.
  // Version of the MCP schema this request adheres to (e.g., "1.0.0"). Expected format: Semantic Versioning (Major.Minor.Patch).
  string mcp_version = 8;
  // Optional: ID of a previous request this one relates to (e.g., for updates or renewals).
  string related_request_id = 9;
  // Optional: Field for future protocol extensions.
  repeated google.protobuf.Any extensions = 10;
}

// The main response message following the Model Context Protocol.
message MCPResponse {
  // Unique identifier for this specific response message (e.g., UUID).
  string response_id = 1;
  // The ID of the MCPRequest this response corresponds to.
  string request_id = 2;
  // Timestamp when the response was generated.
  google.protobuf.Timestamp timestamp = 3;
  // The overall status of the request processing.
  enum Status {
    STATUS_UNSPECIFIED = 0; // Default, should not be used.
    APPROVED = 1;           // The request (all permissions) was approved.
    PARTIALLY_APPROVED = 2; // Some permissions approved, some denied (details in permission_statuses).
    DENIED = 3;             // The request (all permissions) was denied.
    ERROR = 4;              // An error occurred processing the request.
    PENDING = 5;            // The request requires further action (e.g., user interaction) and is not yet decided.
  }
  Status status = 4;
  // Optional: Human-readable message providing context for the status (especially for DENIED, ERROR, PARTIALLY_APPROVED).
  string status_message = 5;

  // Optional: Per-permission status, required if overall status is PARTIALLY_APPROVED.
  message PermissionStatus {
    string resource_identifier = 1; // Matches PermissionSpecification.resource_identifier
    PermissionSpecification.Action requested_action = 2; // Matches PermissionSpecification.requested_action
    bool granted = 3; // True if this specific permission was granted.
    string reason = 4; // Optional reason if denied.
  }
  repeated PermissionStatus permission_statuses = 6;

  // Optional: Payload containing data returned as a result of an approved READ request.
  // Consider using google.protobuf.Any or bytes, depending on expected data types.
  bytes response_payload = 7;

  // Optional: A cryptographic receipt or proof of the consent decision made by the Consent Manager.
  // Could be a signed hash of key decision elements.
  bytes consent_receipt = 8;

  // Cryptographic signature covering the core fields of the response (e.g., fields 1-8, 10)
  // calculated by the responder (Consent Manager) using its private key.
  CryptoSignature signature = 9; // Note: Signature calculation must exclude the signature field itself and potentially extensions.

  // Version of the MCP schema this response adheres to (e.g., "1.0.0"). Expected format: Semantic Versioning (Major.Minor.Patch).
  string mcp_version = 10;

  // Optional: Field for future protocol extensions.
  repeated google.protobuf.Any extensions = 11;
} 